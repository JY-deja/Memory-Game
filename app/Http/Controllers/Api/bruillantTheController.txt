pour la fonction index  
// $answers = Word::select("meaning")
//                 ->inRandomOrder()
//                 ->limit(2)
//                 ->get();
// $answersTable =$answers->toArray();
 /*
     while the correct value not exist in the answers table reopete the random selector.
 */
// while(!in_array($CorrectAnswer, $answersTable)){
//     ->inRandomOrder()
//     $answers = Word::select("meaning")
//     ->limit(2)
//     ->get();
// }
// echo $answers;
// $myObj = json_decode($words1);
// //$myObj->Answer_1 = $answer[2]->meaning; ;
// $words_1 = json_encode($myObj);
// //$words->Answer_1 = $answer[2]->meaning;
-------------------------------------------------------------------------------------------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Auth\SessionGuard;
use Tymon\JWTAuth\Facades\JWTAuth;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth; 
use Illuminate\Support\Facades\Validator;


class AuthController extends Controller
{
    /**
     * Create a new AuthController instance.
     *
     * @return void
     */
    public function __construct() {
        $this->middleware('auth:api', ['except' => ['login', 'register']]);
    }
    /**
     * Get a JWT via given credentials.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function login(Request $request){
    	// $validator = Validator::make($request->all(), [
        //     'email' => 'required|email',
        //     'password' => 'required|string|min:6',
        // ]);
        // if ($validator->fails()) {
        //     return response()->json($validator->errors(), 422);
        // }
        // if (! $token = auth()->attempt($validator->validated())) {
        //     return response()->json(['error' => 'Unauthorized'], 401);
        // }
        
        // return $this->createNewToken($token);
        $validatedData = $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        // attempt to authenticate the user
        if (!$token = JWTAuth::attempt($validatedData)) {
            return response()->json(['status' => 'error', 'message' => 'Unauthorized'], 401);
        }

        // return a response with the JWT token
        return response()->json([
            'status' => 'success',
            'token' => $token,
        ]);
   
    }
    /**
     * Register a User.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function register(Request $request) {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|between:2,100',
            'email' => 'required|string|email|max:100|unique:users',
            'password' => 'required|string|min:6',
        ]);
        if($validator->fails()){
            return response()->json($validator->errors()->toJson(), 400);
        }
        $user = User::create(array_merge(
                    $validator->validated(),
                    ['password' => bcrypt($request->password)]
                ));
        return response()->json([
            'message' => 'User successfully registered',
            'user' => $user
        ], 201);
    }

    /**
     * Log the user out (Invalidate the token).
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function logout() {
        auth()->logout();
        return response()->json(['message' => 'User successfully signed out']);
    }
    /**
     * Refresh a token.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function refresh() {
        return $this->createNewToken(auth()->refresh());
    }
    /**
     * Get the authenticated User.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function userProfile() {
        return response()->json(auth()->user());
    }
    /**
     * Get the token array structure.
     *
     * @param  string $token
     *
     * @return \Illuminate\Http\JsonResponse
     */
    protected function createNewToken($token){
        return response()->json([
            'access_token' => $token,
            'token_type' => 'bearer',
            'expires_in' => auth()->factory()->getTTL() * 60,
            //'expires_in' => auth('api')->factory()->getTTL() * 60,
            'user' => auth()->user()
        ]);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------
/**
 
        // $words = $words1->map(function ($item) {
        //$meaning = Word::select("meaning")->first();
        // $answer_1 = Word::select("meaning")->Limit(1)
        // ->select("meaning")
        // ->inRandomOrder()
        // ->limit(1)
        // ->whereNotIn("meaning" , $meaning)
        // ->get();
        // $answer_2 = Word::select("meaning")
        //                 ->inRandomOrder()
        //                 ->limit(1)
        //                 ->whereNotIn("meaning" , $answer_1)
        //                 ->whereNotIn("meaning" , $meaning)
        //                 ->get();
        //     $item->Answer_1 = $answer_1;
        //     $item->Answer_2 = $answer_2;
        //     return $item;
        // });
 */